import telebot
import base64
from config import key

bot = telebot.TeleBot(key)

@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        bot.send_message(
            message.chat.id, 
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∏—Ñ—Ä–æ–≤–∞–ª—å–Ω—é!\n\n"
            "üîí *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*\n"
            "1Ô∏è‚É£ - –°–æ–∑–¥–∞—Ç—å —à–∏—Ñ—Ä\n"
            "2Ô∏è‚É£ - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —à–∏—Ñ—Ä\n"
            "3Ô∏è‚É£ - –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            parse_mode='Markdown'
        )
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in start_message: {e}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        if message.text == "1":
            msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_text_to_encrypt)
        elif message.text == "2":
            msg = bot.send_message(message.chat.id, "üõ† –í–≤–µ–¥–∏—Ç–µ —à–∏—Ñ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
            bot.register_next_step_handler(msg, get_cipher_to_decrypt)
        elif message.text == "3":
            show_details(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in handle_message: {e}")

def get_text_to_encrypt(message):
    try:
        text = message.text
        msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á-—Å–ª–æ–≤–æ –¥–ª—è —à–∏—Ñ—Ä–∞—Ü–∏–∏:")
        bot.register_next_step_handler(msg, lambda m: create_cipher(m, text))
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in get_text_to_encrypt: {e}")

def create_cipher(message, text):
    try:
        key = message.text
        cipher_text = encrypt(text, key)
        bot.send_message(
            message.chat.id, 
            f"üîê *–í–∞—à —à–∏—Ñ—Ä:* `{cipher_text}`\n\n"
            "üîÑ –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –≤—ã–±—Ä–∞–≤ –ø—É–Ω–∫—Ç 2",
            parse_mode='Markdown'
        )
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∏—Ñ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in create_cipher: {e}")

def get_cipher_to_decrypt(message):
    try:
        cipher_text = message.text
        msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á-—Å–ª–æ–≤–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(msg, lambda m: decrypt_cipher(m, cipher_text))
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —à–∏—Ñ—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in get_cipher_to_decrypt: {e}")

def decrypt_cipher(message, cipher_text):
    try:
        key = message.text
        decrypted_text = decrypt(cipher_text, key)
        bot.send_message(
            message.chat.id, 
            f"üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:* `{decrypted_text}`",
            parse_mode='Markdown'
        )
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in decrypt_cipher: {e}")

def show_details(message):
    try:
        bot.send_message(
            message.chat.id, 
            "‚ÑπÔ∏è *–û –ø—Ä–æ–≥—Ä–∞–º–º–µ*\n\n"
            "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞\n"
            "üîÑ –î–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞\n"
            "üí¨ –®–∏—Ñ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π\n\n"
            "üí¨ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @abdurrsss",
            parse_mode='Markdown'
        )
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        print(f"Error in show_details: {e}")

def encrypt(text, key):
    try:
        result = []
        for i in range(len(text)):
            c = text[i]
            key_char = key[i % len(key)]
            encrypted_char = chr(ord(c) + ord(key_char))
            result.append(encrypted_char)
        encrypted_text = ''.join(result)
        return convert_to_base64(encrypted_text)
    except Exception as e:
        print(f"Error in encrypt: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞"

def decrypt(cipher_text, key):
    try:
        decoded_text = convert_from_base64(cipher_text)
        result = []
        for i in range(len(decoded_text)):
            c = decoded_text[i]
            key_char = key[i % len(key)]
            decrypted_char = chr(ord(c) - ord(key_char))
            result.append(decrypted_char)
        return ''.join(result)
    except Exception as e:
        print(f"Error in decrypt: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–µ–∫—Å—Ç–∞"

def convert_to_base64(text):
    try:
        text_bytes = text.encode('utf-8')
        return base64.b64encode(text_bytes).decode('utf-8')
    except Exception as e:
        print(f"Error in convert_to_base64: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ Base64"

def convert_from_base64(base64_text):
    try:
        text_bytes = base64.b64decode(base64_text)
        return text_bytes.decode('utf-8')
    except Exception as e:
        print(f"Error in convert_from_base64: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ Base64"

bot.polling()
